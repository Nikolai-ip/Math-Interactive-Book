//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""SpaceBattle"",
            ""id"": ""e95514af-07a2-44b3-a25a-46381cd4aed9"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""33ac7403-4873-44a4-9e59-efb803e458fa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AddForce"",
                    ""type"": ""Button"",
                    ""id"": ""d937d030-9188-455e-86ee-c79877c7bb72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shot"",
                    ""type"": ""Button"",
                    ""id"": ""e7830c47-add1-43a6-878c-83c3eb935109"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0753bbde-6da6-4652-9ef7-0eb14c09cc84"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""AddForce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c5fe70d-8726-49be-8081-fbcdc7278dce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Shot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""d1d7b5e1-8752-43c3-8fa9-bc85fdd53c27"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""1bc268e9-1ca3-499b-97c2-61dbcaa1a954"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""5940e74e-7ae2-42db-a7ea-eea450aed671"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6f4c0c04-0a72-48c3-b87b-7f92a62415bb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0da2ae17-6b85-455f-8c16-354868a88f9d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SpaceBattle
        m_SpaceBattle = asset.FindActionMap("SpaceBattle", throwIfNotFound: true);
        m_SpaceBattle_Rotate = m_SpaceBattle.FindAction("Rotate", throwIfNotFound: true);
        m_SpaceBattle_AddForce = m_SpaceBattle.FindAction("AddForce", throwIfNotFound: true);
        m_SpaceBattle_Shot = m_SpaceBattle.FindAction("Shot", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceBattle
    private readonly InputActionMap m_SpaceBattle;
    private ISpaceBattleActions m_SpaceBattleActionsCallbackInterface;
    private readonly InputAction m_SpaceBattle_Rotate;
    private readonly InputAction m_SpaceBattle_AddForce;
    private readonly InputAction m_SpaceBattle_Shot;
    public struct SpaceBattleActions
    {
        private @Controls m_Wrapper;
        public SpaceBattleActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_SpaceBattle_Rotate;
        public InputAction @AddForce => m_Wrapper.m_SpaceBattle_AddForce;
        public InputAction @Shot => m_Wrapper.m_SpaceBattle_Shot;
        public InputActionMap Get() { return m_Wrapper.m_SpaceBattle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceBattleActions set) { return set.Get(); }
        public void SetCallbacks(ISpaceBattleActions instance)
        {
            if (m_Wrapper.m_SpaceBattleActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnRotate;
                @AddForce.started -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnAddForce;
                @AddForce.performed -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnAddForce;
                @AddForce.canceled -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnAddForce;
                @Shot.started -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnShot;
                @Shot.performed -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnShot;
                @Shot.canceled -= m_Wrapper.m_SpaceBattleActionsCallbackInterface.OnShot;
            }
            m_Wrapper.m_SpaceBattleActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @AddForce.started += instance.OnAddForce;
                @AddForce.performed += instance.OnAddForce;
                @AddForce.canceled += instance.OnAddForce;
                @Shot.started += instance.OnShot;
                @Shot.performed += instance.OnShot;
                @Shot.canceled += instance.OnShot;
            }
        }
    }
    public SpaceBattleActions @SpaceBattle => new SpaceBattleActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    public interface ISpaceBattleActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnAddForce(InputAction.CallbackContext context);
        void OnShot(InputAction.CallbackContext context);
    }
}
